#!/usr/bin/env python3

__version__ = '1.0'

import bs4
import json
import os
import sys
from argparse import ArgumentParser

def parseArgs():
	parser = ArgumentParser(description='Extracts the top two best taxa '
		'that match to each analyte in a Hypertext Markup Language (HTML) '
		'file containing JavaScript Object Notation (JSON) formatted data '
		'generated by a Bruker MALDI-TOF Biotyper and reports each hit\'s '
		'global match value', epilog='NOTE: there is apparently no maximum '
		'JSON size to extract with the bs4 module, unlike the lxml 10 MB '
		'hardcoded maximum', add_help=False)
	req = parser.add_argument_group('Required')
	req.add_argument('-i', '--infile', required=True, metavar='FILE',
		help='input HTML file containing JSON-encoded data')
	opt = parser.add_argument_group('Optional')
	opt.add_argument('-h', '--help', action='help',
		help='show this help message and exit')
	opt.add_argument('-o', '--outfile', required=False, metavar='FILE',
		default=None, help='tab-delimited output [stdout]')
	opt.add_argument('-v', '--version', action='version',
		version='%(prog)s v{}'.format(__version__))
	return parser.parse_args()

def main():
	opt = parseArgs()
	ifh = os.path.abspath(os.path.expanduser(opt.infile))

	# Extract the internal JSON data structure from the HTML file
	with open(ifh, encoding='utf-8') as html_file:
		html_data = bs4.BeautifulSoup(html_file, 'html5lib')
	found = html_data.find('textarea')

	# Confirm JSON data extracted from HTML file
	if not found:
		sys.stderr.write('ERROR: absent textarea tag containing JSON data\n')
		sys.exit(1)
	json_data = json.loads(found.string)

	# Parse the internal JSON data structure within the HTML file
	hdr = ('External_ID\tInternal_ID\tBest_Matched_Taxon\tBest_Score\t'
			'Second_Best_Matched_Taxon\tSecond_Score')
	out = [hdr]
	for j in json_data[u'Analytes']:
		extnl = j[u'externId']
		intnl = j[u'internId']
		hits  = []

		# MspMatches are already sorted best (top) to worse (bottom)
		for k in j[u'MspMatches'][:2]:
			val = float(k['globalMatchValue'])
			if val > 0:
				taxon = k['referencePatternName']
				hits.extend((taxon, str(val)))
			else:
				hits.extend(('no peaks found', '0'))
		out.append('{}\t{}\t{}'.format(extnl, intnl, '\t'.join(hits)))

	# Transmit output to stdout or file
	if opt.outfile is None:
		for extracted in out:
			print(extracted)
	else:
		fo = os.path.abspath(os.path.expanduser(opt.outfile))
		with open(fo, 'w') as ofh:
			ofh.write('\n'.join(out))

if __name__ == '__main__':
	main()